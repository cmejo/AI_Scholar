{
  "name": "ai-scholar-rag-chatbot",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "description": "Production-ready RAG chatbot with beautiful UI",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "type-check": "tsc --noEmit",
    "type-check:watch": "tsc --noEmit --watch",
    "quality:check": "npm run type-check && npm run lint && npm run format:check",
    "quality:fix": "npm run format && npm run lint:fix",
    "quality:full": "npm run quality:fix && npm run type-check && npm run test:run",
    "preview": "vite preview",
    "dev:full": "concurrently \"npm run dev\" \"npm run backend:dev\"",
    "backend:dev": "cd backend && python3 -m uvicorn app:app --reload --host 0.0.0.0 --port 8000",
    "test": "vitest",
    "test:run": "vitest run",
    "test:coverage": "vitest run --coverage",
    "test:integration": "vitest run --config vitest.integration.config.ts",
    "test:unit": "vitest run --exclude='**/*.integration.test.*'",
    "test:watch": "vitest --watch",
    "test:ui": "vitest --ui",
    "test:coverage:watch": "vitest --coverage --watch",
    "test:coverage:threshold": "vitest run --coverage --reporter=verbose --reporter=json",
    "test:all": "npm run test:unit && npm run test:integration && npm run test:coverage",
    "test:comprehensive": "node scripts/run-comprehensive-tests.js",
    "test:comprehensive:ci": "node scripts/run-comprehensive-tests.js --skip-optional --continue-on-error",
    "test:coverage:report": "node scripts/test-coverage-reporter.js",
    "test:coverage:detailed": "npm run test:coverage && npm run test:coverage:report",
    "backend:lint": "cd backend && python3 -m flake8 .",
    "backend:format": "cd backend && python3 -m black . && python3 -m isort .",
    "backend:format:check": "cd backend && python3 -m black --check . && python3 -m isort --check-only .",
    "backend:type-check": "cd backend && python3 -m mypy .",
    "backend:quality:check": "npm run backend:format:check && npm run backend:lint && npm run backend:type-check",
    "backend:quality:fix": "npm run backend:format && npm run backend:lint",
    "quality:metrics": "node scripts/quality-metrics.js",
    "quality:metrics:backend": "python3 scripts/backend-quality-metrics.py",
    "quality:metrics:comprehensive": "node scripts/quality-metrics-aggregator.js",
    "quality:dashboard": "python3 scripts/quality-dashboard.py",
    "quality:alerts": "python3 scripts/quality-alerts.py",
    "quality:config:validate": "node scripts/quality-config-validator.js",
    "quality:monitor:complete": "node scripts/quality-monitor.js",
    "quality:full-report": "npm run quality:metrics:comprehensive && npm run quality:dashboard",
    "quality:monitor": "npm run quality:full-report && npm run quality:alerts",
    "quality:trends": "npm run quality:metrics:comprehensive && npm run quality:dashboard && npm run quality:alerts",
    "bundle:analyze": "node scripts/analyze-bundle.cjs",
    "bundle:build-analyze": "npm run build && npm run bundle:analyze",
    "bundle:visualize": "npm run build && open dist/bundle-analysis.html",
    "bundle:optimize": "node scripts/optimize-bundle.cjs",
    "bundle:optimize-full": "npm run bundle:optimize && npm run build && npm run bundle:analyze",
    "performance:monitor": "node scripts/performance-monitor.cjs",
    "performance:monitor:ci": "node scripts/performance-monitor.cjs --ci",
    "performance:regression": "npm run bundle:analyze && node -e \"const report = require('./bundle-analysis-report.json'); if (report.regressions && report.regressions.length > 0) { console.log('Performance regressions detected!'); process.exit(1); }\"",
    "deps:analyze": "node scripts/dependency-analyzer.cjs",
    "deps:unused": "npm run deps:analyze | grep 'npm uninstall'",
    "optimize:deps": "npm run deps:analyze && npm run bundle:analyze",
    "optimize:tree-shaking": "node scripts/analyze-tree-shaking.cjs",
    "optimize:code-splitting": "echo 'Code splitting optimization requires manual implementation. See bundle optimization report for recommendations.'",
    "optimize:full": "npm run bundle:optimize && npm run quality:check && npm run test:run",
    "docs:generate": "node scripts/generate-api-docs.js",
    "docs:maintain": "node scripts/maintain-documentation.js",
    "docs:validate": "node scripts/maintain-documentation.js --validate-only",
    "docs:update": "npm run docs:generate && npm run docs:maintain",
    "prepare": "husky",
    "tools:analyze": "python3 tools/analysis/unified_analyzer.py",
    "tools:test-optimize": "python3 tools/testing/test_consolidator.py",
    "tools:performance": "python3 tools/monitoring/performance_monitor.py",
    "tools:consolidate": "python3 tools/maintenance/script_consolidator.py --consolidate",
    "tools:health": "python3 tools/monitoring/performance_monitor.py && python3 tools/analysis/unified_analyzer.py --types quality performance",
    "deploy:staging": "docker-compose -f docker-compose.yml -f docker-compose.staging.yml up -d",
    "deploy:prod": "docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d",
    "health:check": "python3 tools/monitoring/performance_monitor.py",
    "db:migrate": "cd backend && alembic upgrade head",
    "db:seed": "cd backend && python3 scripts/seed_database.py"
  },
  "dependencies": {
    "lucide-react": "^0.344.0",
    "pdfjs-dist": "^5.4.54",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-pdf": "^10.1.0",
    "react-router-dom": "^7.8.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.1",
    "@testing-library/jest-dom": "^6.6.4",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "@vitest/coverage-v8": "^1.3.1",
    "autoprefixer": "^10.4.18",
    "eslint": "^9.9.1",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.11",
    "globals": "^15.9.0",
    "husky": "^9.0.11",
    "jsdom": "^26.1.0",
    "lint-staged": "^15.2.2",
    "postcss": "^8.4.35",
    "prettier": "^3.2.5",
    "rollup-plugin-visualizer": "^6.0.3",
    "tailwindcss": "^3.4.1",
    "terser": "^5.43.1",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.3.0",
    "vite": "^5.4.2",
    "vitest": "^1.3.1"
  },
  "lint-staged": {
    "*.{ts,tsx,js,jsx}": [
      "prettier --write",
      "eslint --fix",
      "bash -c 'tsc --noEmit'"
    ],
    "*.{json,md,yml,yaml}": [
      "prettier --write"
    ],
    "backend/**/*.py": [
      "python -m black --line-length 88",
      "python -m isort",
      "python -m flake8",
      "python -m mypy --ignore-missing-imports"
    ]
  },
  "keywords": [
    "rag",
    "chatbot",
    "ai",
    "ollama",
    "vector-search",
    "document-processing",
    "production-ready"
  ],
  "author": "AI Scholar Team",
  "repository": {
    "type": "git",
    "url": "https://github.com/cmejo/AI_Scholar"
  }
}