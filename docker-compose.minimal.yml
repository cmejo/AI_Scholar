# AI Scholar Minimal Docker Compose
# Only essential services for basic functionality

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: ai-scholar-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ai_scholar_db}
      POSTGRES_USER: ${POSTGRES_USER:-ai_scholar_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    networks:
      - ai-scholar-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ai_scholar_user} -d ${POSTGRES_DB:-ai_scholar_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-scholar-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6380}:6379"
    networks:
      - ai-scholar-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend API (without ChromaDB and Ollama dependencies)
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      args:
        - BUILDKIT_INLINE_CACHE=1
    image: ai-scholar-backend:latest
    container_name: ai-scholar-backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-ai_scholar_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-ai_scholar_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - VECTOR_DB_URL=http://localhost:8081  # Placeholder - not used
      - OLLAMA_URL=http://localhost:11435    # Placeholder - not used
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ENVIRONMENT=production
      - DEBUG=False
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - HOST=0.0.0.0
      - PORT=8000
      - CORS_ORIGINS=${CORS_ORIGINS:-https://yourdomain.com}
      - MAX_FILE_SIZE_MB=${MAX_FILE_SIZE_MB:-100}
      - ENABLE_MONITORING=True
      - PROMETHEUS_METRICS_ENABLED=True
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./backups:/app/backups
    ports:
      - "${BACKEND_PORT:-8001}:8000"
    networks:
      - ai-scholar-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.simple
      args:
        - BUILDKIT_INLINE_CACHE=1
    image: ai-scholar-frontend:latest
    container_name: ai-scholar-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3006}:3005"
    networks:
      - ai-scholar-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx Reverse Proxy
  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    image: ai-scholar-nginx:latest
    container_name: ai-scholar-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./logs/nginx:/var/log/nginx
    networks:
      - ai-scholar-network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

networks:
  ai-scholar-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
    driver_opts:
      com.docker.network.bridge.name: ai-scholar-br0

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis