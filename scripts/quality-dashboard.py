#!/usr/bin/env python3
"""
AI Scholar RAG Chatbot - Quality Dashboard Generator

This script generates an interactive HTML dashboard for visualizing code quality metrics,
trends, and alerts with charts and graphs.
"""

import json
import os
import sys
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any, Optional
import base64


class QualityDashboard:
    """Quality metrics dashboard generator"""
    
    def __init__(self, reports_dir: str = "quality-reports"):
        self.reports_dir = Path(reports_dir)
        self.output_file = self.reports_dir / "quality-dashboard.html"
        
        if not self.reports_dir.exists():
            self.reports_dir.mkdir(exist_ok=True)
    
    def generate_dashboard(self) -> None:
        """Generate the complete quality dashboard"""
        print("📊 Generating quality dashboard...")
        
        # Load all available metrics
        metrics_data = self._load_metrics_data()
        trends_data = self._load_trends_data()
        
        # Generate HTML dashboard
        html_content = self._generate_html_dashboard(metrics_data, trends_data)
        
        # Save dashboard
        with open(self.output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"✅ Quality dashboard generated: {self.output_file}")
        print(f"🌐 Open in browser: file://{self.output_file.absolute()}")
    
    def _load_metrics_data(self) -> Dict[str, Any]:
        """Load the latest metrics data"""
        metrics_files = list(self.reports_dir.glob("quality-metrics-*.json"))
        
        if not metrics_files:
            return self._get_default_metrics()
        
        # Get the most recent metrics file
        latest_file = max(metrics_files, key=lambda f: f.stat().st_mtime)
        
        try:
            with open(latest_file, 'r') as f:
                return json.load(f)
        except Exception as e:
            print(f"⚠️ Error loading metrics from {latest_file}: {e}")
            return self._get_default_metrics()
    
    def _load_trends_data(self) -> List[Dict[str, Any]]:
        """Load trends data"""
        trends_file = self.reports_dir / "quality-trends.json"
        
        if not trends_file.exists():
            return []
        
        try:
            with open(trends_file, 'r') as f:
                return json.load(f)
        except Exception as e:
            print(f"⚠️ Error loading trends data: {e}")
            return []
    
    def _get_default_metrics(self) -> Dict[str, Any]:
        """Return default metrics structure"""
        return {
            "timestamp": datetime.now().isoformat(),
            "overall": {
                "qualityScore": 0,
                "coverage": 0,
                "totalErrors": 0,
                "securityScore": 0,
                "maintainabilityIndex": 0
            },
            "frontend": {
                "eslint": {"errorCount": 0, "warningCount": 0},
                "typescript": {"errors": 0},
                "coverage": {"statements": 0, "branches": 0, "functions": 0, "lines": 0}
            },
            "backend": {
                "flake8": {"totalIssues": 0},
                "mypy": {"errors": 0},
                "coverage": {"statements": 0},
                "security": {"totalIssues": 0, "highSeverity": 0}
            },
            "alerts": []
        }
    
    def _generate_html_dashboard(self, metrics: Dict[str, Any], trends: List[Dict[str, Any]]) -> str:
        """Generate the complete HTML dashboard"""
        return f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Scholar - Code Quality Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        {self._get_css_styles()}
    </style>
</head>
<body>
    <div class="dashboard">
        <header class="header">
            <h1>🎯 AI Scholar Code Quality Dashboard</h1>
            <div class="last-updated">
                Last Updated: {datetime.fromisoformat(metrics['timestamp']).strftime('%Y-%m-%d %H:%M:%S')}
            </div>
        </header>
        
        <div class="metrics-grid">
            {self._generate_overview_cards(metrics)}
        </div>
        
        <div class="charts-grid">
            {self._generate_charts_section(metrics, trends)}
        </div>
        
        <div class="details-grid">
            {self._generate_details_section(metrics)}
        </div>
        
        <div class="alerts-section">
            {self._generate_alerts_section(metrics.get('alerts', []))}
        </div>
        
        <footer class="footer">
            <p>Generated by AI Scholar Quality Metrics System</p>
        </footer>
    </div>
    
    <script>
        {self._generate_javascript(metrics, trends)}
    </script>
</body>
</html>"""
    
    def _get_css_styles(self) -> str:
        """Return CSS styles for the dashboard"""
        return """
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        .dashboard {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            margin-bottom: 30px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .last-updated {
            color: #666;
            font-size: 1rem;
        }
        
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .metric-card {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
            text-align: center;
            transition: transform 0.3s ease;
        }
        
        .metric-card:hover {
            transform: translateY(-5px);
        }
        
        .metric-value {
            font-size: 2.5rem;
            font-weight: bold;
            margin: 10px 0;
        }
        
        .metric-label {
            color: #666;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .metric-status {
            font-size: 1.5rem;
            margin-top: 10px;
        }
        
        .status-excellent { color: #10b981; }
        .status-good { color: #3b82f6; }
        .status-warning { color: #f59e0b; }
        .status-error { color: #ef4444; }
        
        .charts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .chart-card {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
        }
        
        .chart-title {
            font-size: 1.2rem;
            font-weight: bold;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .details-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .details-card {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
        }
        
        .details-title {
            font-size: 1.2rem;
            font-weight: bold;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .details-list {
            list-style: none;
        }
        
        .details-list li {
            padding: 8px 0;
            border-bottom: 1px solid #f0f0f0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .details-list li:last-child {
            border-bottom: none;
        }
        
        .alerts-section {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        
        .alerts-title {
            font-size: 1.5rem;
            font-weight: bold;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .alert-item {
            padding: 15px;
            margin: 10px 0;
            border-radius: 10px;
            border-left: 4px solid;
        }
        
        .alert-error {
            background: #fef2f2;
            border-color: #ef4444;
        }
        
        .alert-warning {
            background: #fffbeb;
            border-color: #f59e0b;
        }
        
        .alert-info {
            background: #eff6ff;
            border-color: #3b82f6;
        }
        
        .alert-message {
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .alert-recommendation {
            color: #666;
            font-size: 0.9rem;
        }
        
        .footer {
            text-align: center;
            padding: 20px;
            color: white;
            opacity: 0.8;
        }
        
        .no-data {
            text-align: center;
            color: #666;
            font-style: italic;
            padding: 40px;
        }
        
        @media (max-width: 768px) {
            .dashboard {
                padding: 10px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .metrics-grid,
            .charts-grid,
            .details-grid {
                grid-template-columns: 1fr;
            }
        }
        """
    
    def _generate_overview_cards(self, metrics: Dict[str, Any]) -> str:
        """Generate overview metric cards"""
        overall = metrics.get('overall', {})
        
        cards = [
            {
                'title': 'Quality Score',
                'value': f"{overall.get('qualityScore', 0)}/100",
                'status': self._get_status_class(overall.get('qualityScore', 0), 80),
                'icon': '🎯'
            },
            {
                'title': 'Test Coverage',
                'value': f"{overall.get('coverage', 0):.1f}%",
                'status': self._get_status_class(overall.get('coverage', 0), 80),
                'icon': '🧪'
            },
            {
                'title': 'Total Errors',
                'value': str(overall.get('totalErrors', 0)),
                'status': 'status-excellent' if overall.get('totalErrors', 0) == 0 else 'status-error',
                'icon': '🐛'
            },
            {
                'title': 'Security Score',
                'value': f"{overall.get('securityScore', 0)}/100",
                'status': self._get_status_class(overall.get('securityScore', 0), 90),
                'icon': '🔒'
            },
            {
                'title': 'Maintainability',
                'value': f"{overall.get('maintainabilityIndex', 0)}/100",
                'status': self._get_status_class(overall.get('maintainabilityIndex', 0), 70),
                'icon': '🔧'
            }
        ]
        
        html = ""
        for card in cards:
            html += f"""
            <div class="metric-card">
                <div class="metric-status">{card['icon']}</div>
                <div class="metric-value {card['status']}">{card['value']}</div>
                <div class="metric-label">{card['title']}</div>
            </div>
            """
        
        return html
    
    def _generate_charts_section(self, metrics: Dict[str, Any], trends: List[Dict[str, Any]]) -> str:
        """Generate charts section"""
        return f"""
        <div class="chart-card">
            <div class="chart-title">📈 Quality Trends</div>
            <canvas id="trendsChart" width="400" height="200"></canvas>
        </div>
        
        <div class="chart-card">
            <div class="chart-title">🎯 Quality Distribution</div>
            <canvas id="qualityChart" width="400" height="200"></canvas>
        </div>
        
        <div class="chart-card">
            <div class="chart-title">🔍 Error Breakdown</div>
            <canvas id="errorsChart" width="400" height="200"></canvas>
        </div>
        
        <div class="chart-card">
            <div class="chart-title">📊 Coverage Comparison</div>
            <canvas id="coverageChart" width="400" height="200"></canvas>
        </div>
        """
    
    def _generate_details_section(self, metrics: Dict[str, Any]) -> str:
        """Generate detailed metrics section"""
        frontend = metrics.get('frontend', {})
        backend = metrics.get('backend', {})
        
        return f"""
        <div class="details-card">
            <div class="details-title">
                🎨 Frontend Metrics
            </div>
            <ul class="details-list">
                <li>
                    <span>ESLint Errors</span>
                    <span class="{'status-excellent' if frontend.get('eslint', {}).get('errorCount', 0) == 0 else 'status-error'}">
                        {frontend.get('eslint', {}).get('errorCount', 0)}
                    </span>
                </li>
                <li>
                    <span>ESLint Warnings</span>
                    <span class="{'status-excellent' if frontend.get('eslint', {}).get('warningCount', 0) == 0 else 'status-warning'}">
                        {frontend.get('eslint', {}).get('warningCount', 0)}
                    </span>
                </li>
                <li>
                    <span>TypeScript Errors</span>
                    <span class="{'status-excellent' if frontend.get('typescript', {}).get('errors', 0) == 0 else 'status-error'}">
                        {frontend.get('typescript', {}).get('errors', 0)}
                    </span>
                </li>
                <li>
                    <span>Statement Coverage</span>
                    <span class="{self._get_status_class(frontend.get('coverage', {}).get('statements', 0), 80)}">
                        {frontend.get('coverage', {}).get('statements', 0)}%
                    </span>
                </li>
                <li>
                    <span>Branch Coverage</span>
                    <span class="{self._get_status_class(frontend.get('coverage', {}).get('branches', 0), 80)}">
                        {frontend.get('coverage', {}).get('branches', 0)}%
                    </span>
                </li>
            </ul>
        </div>
        
        <div class="details-card">
            <div class="details-title">
                🐍 Backend Metrics
            </div>
            <ul class="details-list">
                <li>
                    <span>Flake8 Issues</span>
                    <span class="{'status-excellent' if backend.get('flake8', {}).get('totalIssues', 0) == 0 else 'status-warning'}">
                        {backend.get('flake8', {}).get('totalIssues', 0)}
                    </span>
                </li>
                <li>
                    <span>MyPy Errors</span>
                    <span class="{'status-excellent' if backend.get('mypy', {}).get('errors', 0) == 0 else 'status-error'}">
                        {backend.get('mypy', {}).get('errors', 0)}
                    </span>
                </li>
                <li>
                    <span>Test Coverage</span>
                    <span class="{self._get_status_class(backend.get('coverage', {}).get('statements', 0), 80)}">
                        {backend.get('coverage', {}).get('statements', 0)}%
                    </span>
                </li>
                <li>
                    <span>Security Issues</span>
                    <span class="{'status-excellent' if backend.get('security', {}).get('totalIssues', 0) == 0 else 'status-warning'}">
                        {backend.get('security', {}).get('totalIssues', 0)}
                    </span>
                </li>
                <li>
                    <span>High Severity Issues</span>
                    <span class="{'status-excellent' if backend.get('security', {}).get('highSeverity', 0) == 0 else 'status-error'}">
                        {backend.get('security', {}).get('highSeverity', 0)}
                    </span>
                </li>
            </ul>
        </div>
        """
    
    def _generate_alerts_section(self, alerts: List[Dict[str, Any]]) -> str:
        """Generate alerts section"""
        if not alerts:
            return """
            <div class="alerts-section">
                <div class="alerts-title">🚨 Quality Alerts</div>
                <div class="no-data">✅ No quality alerts - all metrics are within acceptable thresholds!</div>
            </div>
            """
        
        alerts_html = ""
        for alert in alerts:
            alert_class = f"alert-{alert.get('severity', 'info')}"
            icon = "❌" if alert.get('severity') == 'error' else "⚠️" if alert.get('severity') == 'warning' else "ℹ️"
            
            alerts_html += f"""
            <div class="alert-item {alert_class}">
                <div class="alert-message">{icon} {alert.get('message', '')}</div>
                <div class="alert-recommendation">{alert.get('recommendation', '')}</div>
            </div>
            """
        
        return f"""
        <div class="alerts-section">
            <div class="alerts-title">🚨 Quality Alerts ({len(alerts)})</div>
            {alerts_html}
        </div>
        """
    
    def _generate_javascript(self, metrics: Dict[str, Any], trends: List[Dict[str, Any]]) -> str:
        """Generate JavaScript for charts"""
        return f"""
        // Chart.js configuration
        Chart.defaults.font.family = '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
        Chart.defaults.color = '#666';
        
        // Quality Trends Chart
        const trendsCtx = document.getElementById('trendsChart').getContext('2d');
        new Chart(trendsCtx, {{
            type: 'line',
            data: {{
                labels: {json.dumps([datetime.fromisoformat(t['timestamp']).strftime('%m/%d') for t in trends[-10:]])},
                datasets: [{{
                    label: 'Quality Score',
                    data: {json.dumps([t.get('qualityScore', 0) for t in trends[-10:]])},
                    borderColor: '#667eea',
                    backgroundColor: 'rgba(102, 126, 234, 0.1)',
                    tension: 0.4
                }}, {{
                    label: 'Coverage %',
                    data: {json.dumps([t.get('coverage', 0) for t in trends[-10:]])},
                    borderColor: '#10b981',
                    backgroundColor: 'rgba(16, 185, 129, 0.1)',
                    tension: 0.4
                }}]
            }},
            options: {{
                responsive: true,
                scales: {{
                    y: {{
                        beginAtZero: true,
                        max: 100
                    }}
                }}
            }}
        }});
        
        // Quality Distribution Chart
        const qualityCtx = document.getElementById('qualityChart').getContext('2d');
        new Chart(qualityCtx, {{
            type: 'doughnut',
            data: {{
                labels: ['Quality Score', 'Remaining'],
                datasets: [{{
                    data: [{metrics.get('overall', {}).get('qualityScore', 0)}, {100 - metrics.get('overall', {}).get('qualityScore', 0)}],
                    backgroundColor: ['#10b981', '#f3f4f6'],
                    borderWidth: 0
                }}]
            }},
            options: {{
                responsive: true,
                plugins: {{
                    legend: {{
                        display: false
                    }}
                }}
            }}
        }});
        
        // Error Breakdown Chart
        const errorsCtx = document.getElementById('errorsChart').getContext('2d');
        new Chart(errorsCtx, {{
            type: 'bar',
            data: {{
                labels: ['ESLint', 'TypeScript', 'Flake8', 'MyPy'],
                datasets: [{{
                    label: 'Errors',
                    data: [
                        {metrics.get('frontend', {}).get('eslint', {}).get('errorCount', 0)},
                        {metrics.get('frontend', {}).get('typescript', {}).get('errors', 0)},
                        {metrics.get('backend', {}).get('flake8', {}).get('totalIssues', 0)},
                        {metrics.get('backend', {}).get('mypy', {}).get('errors', 0)}
                    ],
                    backgroundColor: ['#ef4444', '#f59e0b', '#8b5cf6', '#06b6d4']
                }}]
            }},
            options: {{
                responsive: true,
                scales: {{
                    y: {{
                        beginAtZero: true
                    }}
                }}
            }}
        }});
        
        // Coverage Comparison Chart
        const coverageCtx = document.getElementById('coverageChart').getContext('2d');
        new Chart(coverageCtx, {{
            type: 'radar',
            data: {{
                labels: ['Statements', 'Branches', 'Functions', 'Lines'],
                datasets: [{{
                    label: 'Frontend Coverage',
                    data: [
                        {metrics.get('frontend', {}).get('coverage', {}).get('statements', 0)},
                        {metrics.get('frontend', {}).get('coverage', {}).get('branches', 0)},
                        {metrics.get('frontend', {}).get('coverage', {}).get('functions', 0)},
                        {metrics.get('frontend', {}).get('coverage', {}).get('lines', 0)}
                    ],
                    borderColor: '#667eea',
                    backgroundColor: 'rgba(102, 126, 234, 0.2)'
                }}, {{
                    label: 'Backend Coverage',
                    data: [
                        {metrics.get('backend', {}).get('coverage', {}).get('statements', 0)},
                        {metrics.get('backend', {}).get('coverage', {}).get('statements', 0)},
                        {metrics.get('backend', {}).get('coverage', {}).get('statements', 0)},
                        {metrics.get('backend', {}).get('coverage', {}).get('statements', 0)}
                    ],
                    borderColor: '#10b981',
                    backgroundColor: 'rgba(16, 185, 129, 0.2)'
                }}]
            }},
            options: {{
                responsive: true,
                scales: {{
                    r: {{
                        beginAtZero: true,
                        max: 100
                    }}
                }}
            }}
        }});
        
        // Auto-refresh every 5 minutes
        setTimeout(() => {{
            location.reload();
        }}, 300000);
        """
    
    def _get_status_class(self, value: float, threshold: float) -> str:
        """Get CSS class based on value and threshold"""
        if value >= threshold:
            return 'status-excellent'
        elif value >= threshold * 0.8:
            return 'status-good'
        elif value >= threshold * 0.6:
            return 'status-warning'
        else:
            return 'status-error'


def main():
    """Main execution function"""
    try:
        dashboard = QualityDashboard()
        dashboard.generate_dashboard()
        return 0
    except Exception as e:
        print(f"❌ Dashboard generation failed: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())