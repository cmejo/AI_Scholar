[MASTER]
# Use multiple processes to speed up Pylint
jobs=0

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
init-hook='import sys; sys.path.append(".")'

# Files or directories to be skipped. They should be base names, not paths.
ignore=CVS,migrations,alembic,venv,.venv,__pycache__,.pytest_cache,.mypy_cache

# Files or directories matching the regex patterns are skipped.
ignore-patterns=test_.*\.py,.*_test\.py

# Pickle collected data for later comparisons.
persistent=yes

# List of plugins (as comma separated values of python modules names) to load
load-plugins=pylint.extensions.docparams,
             pylint.extensions.docstyle,
             pylint.extensions.check_elif,
             pylint.extensions.bad_builtin,
             pylint.extensions.mccabe,
             pylint.extensions.code_style,
             pylint.extensions.overlapping_exceptions,
             pylint.extensions.redefined_variable_type

# Use a conservative default here; 2 should speed up most setups and you can
# always use 1 or 0 to fall back to a previous behavior
extension-pkg-whitelist=pydantic

[MESSAGES CONTROL]
# Only show warnings with the listed confidence levels. Leave empty to show all.
confidence=

# Disable the message, report, category or checker with the given id(s).
disable=
    C0103,  # invalid-name (handled by naming conventions)
    C0111,  # missing-docstring (too verbose for all functions)
    C0301,  # line-too-long (handled by black)
    R0903,  # too-few-public-methods (common in data classes)
    R0913,  # too-many-arguments (common in constructors)
    W0613,  # unused-argument (common in interfaces)
    W0622,  # redefined-builtin (common with id, type, etc.)
    E1101,  # no-member (false positives with SQLAlchemy)
    R0801,  # duplicate-code (common in tests)
    W0212,  # protected-access (needed for testing)
    C0415,  # import-outside-toplevel (needed for conditional imports)

# Enable the message, report, category or checker with the given id(s).
enable=
    W0511,  # fixme (TODO, FIXME, XXX comments)
    C0325,  # superfluous-parens
    C0326,  # bad-whitespace
    W0611,  # unused-import
    W0612,  # unused-variable

[REPORTS]
# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed.
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Template used to display messages.
msg-template={path}:{line}:{column}: {msg_id}: {msg} ({symbol})

# Set the output format. Available formats are text, parseable, colorized, json
output-format=text

# Tells whether to display a full report or only the messages
reports=no

# Activate the evaluation score.
score=yes

[REFACTORING]
# Maximum number of nested blocks for function / method body
max-nested-blocks=5

# Complete name of functions that never returns.
never-returning-functions=sys.exit

[BASIC]
# Naming style matching correct argument names
argument-naming-style=snake_case

# Regular expression matching correct argument names
argument-rgx=[a-z_][a-z0-9_]{2,30}$

# Naming style matching correct attribute names
attr-naming-style=snake_case

# Regular expression matching correct attribute names
attr-rgx=[a-z_][a-z0-9_]{2,30}$

# Bad variable names which should always be refused, separated by a comma
bad-names=foo,bar,baz,toto,tutu,tata

# Naming style matching correct class attribute names
class-attribute-naming-style=any

# Naming style matching correct class names
class-naming-style=PascalCase

# Regular expression matching correct class names
class-rgx=[A-Z_][a-zA-Z0-9]+$

# Naming style matching correct constant names
const-naming-style=UPPER_CASE

# Regular expression matching correct constant names
const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=-1

# Naming style matching correct function names
function-naming-style=snake_case

# Regular expression matching correct function names
function-rgx=[a-z_][a-z0-9_]{2,30}$

# Good variable names which should always be accepted, separated by a comma
good-names=i,j,k,ex,Run,_,id,db,app,api,url,uri,sql,df,dt,os,io,re

# Include a hint for the correct naming format with invalid-name
include-naming-hint=no

# Naming style matching correct inline iteration names
inlinevar-naming-style=any

# Regular expression matching correct inline iteration names
inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$

# Naming style matching correct method names
method-naming-style=snake_case

# Regular expression matching correct method names
method-rgx=[a-z_][a-z0-9_]{2,30}$

# Naming style matching correct module names
module-naming-style=snake_case

# Regular expression matching correct module names
module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$

# Colon-delimited sets of names that determine each other's naming style when
# the name regexes allow several styles.
name-group=

# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx=^_

# List of decorators that produce properties, such as abc.abstractproperty.
property-classes=abc.abstractproperty

# Naming style matching correct variable names
variable-naming-style=snake_case

# Regular expression matching correct variable names
variable-rgx=[a-z_][a-z0-9_]{2,30}$

[FORMAT]
# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format=LF

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren=4

# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1 tab).
indent-string='    '

# Maximum number of characters on a single line.
max-line-length=88

# Maximum number of lines in a module
max-module-lines=1000

# List of optional constructs for which whitespace checking is disabled.
no-space-check=trailing-comma,dict-separator

# Allow the body of a class to be on the same line as the declaration if body
# contains single statement.
single-line-class-stmt=no

# Allow the body of an if to be on the same line as the test if there is no else.
single-line-if-stmt=no

[LOGGING]
# Logging modules to check that the string format arguments are in logging
# function parameter format
logging-modules=logging

[MISCELLANEOUS]
# List of note tags to take in consideration, separated by a comma.
notes=FIXME,XXX,TODO,HACK,BUG

[SIMILARITIES]
# Minimum lines number of a similarity.
min-similarity-lines=4

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes

# Ignore imports when computing similarities.
ignore-imports=no

[SPELLING]
# Spelling dictionary name. Available dictionaries: none.
spelling-dict=

# List of comma separated words that should not be checked.
spelling-ignore-words=

# A path to a file that contains private dictionary; one word per line.
spelling-private-dict-file=

# Tells whether to store unknown words to indicated private dictionary in
# --spelling-private-dict-file option instead of raising a message.
spelling-store-unknown-words=no

[TYPECHECK]
# List of decorators that produce context managers, such as
# contextlib.contextmanager.
contextmanager-decorators=contextlib.contextmanager

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed.
generated-members=

# Tells whether missing members accessed in mixin class should be ignored.
ignore-mixin-members=yes

# This flag controls whether pylint should warn about no-member and similar
# checks whenever an opaque object is returned when inferring.
ignore-on-opaque-inference=yes

# List of class names for which member attributes should not be checked
ignored-classes=optparse.Values,thread._local,_thread._local,SQLObject,scoped_session

# List of module names for which member attributes should not be checked
ignored-modules=

# Show a hint with the correct function signature when receiving a wrong
# function signature.
missing-member-hint=yes

# The type of string formatting that logging methods do.
missing-member-hint-distance=1

# List of decorators that change the signature of a decorated function.
signature-mutators=

[VARIABLES]
# List of additional names supposed to be defined in builtins.
additional-builtins=

# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables=yes

# List of strings which can identify a callback function by name.
callbacks=cb_,_cb

# A regular expression matching the name of dummy variables (i.e. expectedly not used).
dummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_

# Argument names that match this expression will be ignored.
ignored-argument-names=_.*|^ignored_|^unused_

# Tells whether we should warn about unused import in __init__ files.
init-import=no

# List of qualified module names which can have objects that can redefine builtins.
redefining-builtins-modules=six.moves,past.builtins,future.builtins,builtins,io

[CLASSES]
# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,setUp

# List of member names, which should be excluded from the protected access warning.
exclude-protected=_asdict,_fields,_replace,_source,_make

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=mcs

[DESIGN]
# Maximum number of arguments for function / method
max-args=5

# Maximum number of attributes for a class (see R0902).
max-attributes=7

# Maximum number of boolean expressions in a if statement
max-bool-expr=5

# Maximum number of branch for function / method body
max-branches=12

# Maximum number of locals for function / method body
max-locals=15

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of public methods for a class (see R0904).
max-public-methods=20

# Maximum number of return / yield for function / method body
max-returns=6

# Maximum number of statements in function / method body
max-statements=50

# Minimum number of public methods for a class (see R0903).
min-public-methods=2

[IMPORTS]
# Allow wildcard imports from modules that define __all__.
allow-wildcard-with-all=no

# Analyse import fallback blocks. This can be used to support both Python 2 and 3
# compatible code, which means that the block might have code that exists only in
# one or the other interpreter, leading to false positives when analysed.
analyse-fallback-blocks=no

# Deprecated modules which should not be used, separated by a comma
deprecated-modules=optparse,tkinter.tix

# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled)
ext-import-graph=

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled)
int-import-graph=

# Force import order to recognize a module as part of the standard
# compatibility libraries.
known-standard-library=

# Force import order to recognize a module as part of a third party library.
known-third-party=enchant

# Couples of modules and preferred modules, separated by a comma.
preferred-modules=

[EXCEPTIONS]
# Exceptions that will emit a warning when being caught.
overgeneral-exceptions=Exception