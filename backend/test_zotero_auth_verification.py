#!/usr/bin/env python3
"""
Verification script for Zotero authentication endpoints and middleware
"""
import sys
import os
import asyncio
from unittest.mock import Mock, AsyncMock, patch

# Add backend to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

async def verify_zotero_auth_implementation():
    """Verify that Zotero authentication implementation is complete"""
    
    print("üîç Verifying Zotero Authentication Implementation...")
    print("=" * 60)
    
    # Test 1: Check if endpoints are importable
    try:
        from api.zotero_endpoints import router
        print("‚úÖ Zotero endpoints router imported successfully")
    except ImportError as e:
        print(f"‚ùå Failed to import Zotero endpoints: {e}")
        return False
    
    # Test 2: Check if middleware is importable
    try:
        from middleware.zotero_auth_middleware import (
            ZoteroAuthMiddleware,
            get_current_user,
            get_zotero_connection,
            get_validated_zotero_client
        )
        print("‚úÖ Zotero auth middleware imported successfully")
    except ImportError as e:
        print(f"‚ùå Failed to import Zotero middleware: {e}")
        return False
    
    # Test 3: Check if auth service is importable
    try:
        from services.zotero.zotero_auth_service import ZoteroAuthService
        print("‚úÖ Zotero auth service imported successfully")
    except ImportError as e:
        print(f"‚ùå Failed to import Zotero auth service: {e}")
        return False
    
    # Test 4: Check if models are importable
    try:
        from models.zotero_models import ZoteroConnection
        from models.zotero_schemas import (
            ZoteroOAuthInitiateResponse,
            ZoteroOAuthCallbackRequest,
            ZoteroConnectionResponse
        )
        print("‚úÖ Zotero models and schemas imported successfully")
    except ImportError as e:
        print(f"‚ùå Failed to import Zotero models/schemas: {e}")
        return False
    
    # Test 5: Verify middleware functionality
    try:
        middleware = ZoteroAuthMiddleware()
        
        # Mock user and credentials
        mock_user = Mock()
        mock_user.id = "test_user_123"
        
        mock_credentials = Mock()
        mock_credentials.credentials = "test_token"
        
        # Test get_current_user with mocked auth service
        with patch.object(middleware.auth_service, 'verify_token', return_value=mock_user):
            result = await middleware.get_current_user(mock_credentials)
            assert result == mock_user
            print("‚úÖ Middleware get_current_user works correctly")
        
    except Exception as e:
        print(f"‚ùå Middleware functionality test failed: {e}")
        return False
    
    # Test 6: Verify auth service functionality
    try:
        auth_service = ZoteroAuthService()
        
        # Test OAuth state generation
        state, code_challenge = auth_service.generate_oauth_state("test_user", use_pkce=True)
        assert state is not None
        assert code_challenge is not None
        print("‚úÖ OAuth state generation works correctly")
        
        # Test authorization URL generation
        auth_url, returned_state = auth_service.get_authorization_url("test_user")
        assert auth_url.startswith("http")
        assert returned_state == state
        print("‚úÖ Authorization URL generation works correctly")
        
    except Exception as e:
        print(f"‚ùå Auth service functionality test failed: {e}")
        return False
    
    # Test 7: Check endpoint routes
    try:
        routes = [route.path for route in router.routes]
        expected_routes = [
            "/api/zotero/oauth/initiate",
            "/api/zotero/oauth/callback",
            "/api/zotero/connections",
            "/api/zotero/connections/{connection_id}",
            "/api/zotero/connections/{connection_id}/validate",
            "/api/zotero/connections/{connection_id}/test"
        ]
        
        for expected_route in expected_routes:
            if not any(expected_route in route for route in routes):
                print(f"‚ùå Missing expected route: {expected_route}")
                return False
        
        print("‚úÖ All expected authentication routes are present")
        
    except Exception as e:
        print(f"‚ùå Route verification failed: {e}")
        return False
    
    print("\n" + "=" * 60)
    print("üéâ All Zotero authentication components verified successfully!")
    print("\nImplemented features:")
    print("‚Ä¢ OAuth 2.0 flow with PKCE support")
    print("‚Ä¢ API key authentication")
    print("‚Ä¢ Token validation and refresh")
    print("‚Ä¢ Connection management")
    print("‚Ä¢ Comprehensive middleware")
    print("‚Ä¢ Error handling and security")
    print("‚Ä¢ Integration tests")
    
    return True

if __name__ == "__main__":
    result = asyncio.run(verify_zotero_auth_implementation())
    sys.exit(0 if result else 1)