[tool:pytest]
# Comprehensive test configuration for backend service restoration testing suite

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Markers for test categorization
markers =
    unit: Unit tests for individual components
    integration: Integration tests for service interactions
    performance: Performance and load tests
    slow: Tests that take longer to run
    service_manager: Tests for ServiceManager functionality
    conditional_importer: Tests for ConditionalImporter functionality
    endpoints: Tests for API endpoints
    error_handling: Tests for error handling scenarios
    health_checks: Tests for health check functionality
    dependency_validation: Tests for service dependency validation
    concurrent: Tests for concurrent operations
    fallback: Tests for fallback mechanisms

# Output and reporting
addopts = 
    --strict-markers
    --strict-config
    --tb=short
    --show-capture=no
    --durations=10
    --color=yes
    -ra

# Minimum version requirements
minversion = 6.0

# Test timeout (in seconds)
timeout = 300

# Parallel execution settings
# Uncomment to enable parallel execution by default
# addopts = -n auto

# Coverage settings (when using --cov)
# These are applied when --cov is used
[coverage:run]
source = core, api, services
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    setup.py
    conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

# HTML coverage report settings
[coverage:html]
directory = htmlcov
title = Backend Service Restoration Test Coverage

# Logging configuration for tests
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Filterwarnings to reduce noise
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning

# Test collection settings
collect_ignore = [
    "setup.py",
    "conftest.py",
    "venv",
    "env",
    "__pycache__"
]

# Asyncio settings
asyncio_mode = auto

# Custom test ordering (if pytest-ordering is installed)
# Tests will run in this order: unit -> integration -> performance
# This can be overridden with command line options