name: Bundle Performance Monitoring

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  bundle-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Run bundle analysis
      run: npm run bundle:analyze

    - name: Check for performance regressions
      id: regression-check
      run: |
        if npm run performance:regression; then
          echo "regression=false" >> $GITHUB_OUTPUT
        else
          echo "regression=true" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true

    - name: Run dependency analysis
      run: npm run deps:analyze

    - name: Upload bundle analysis report
      uses: actions/upload-artifact@v4
      with:
        name: bundle-analysis-report
        path: |
          bundle-analysis-report.json
          dependency-analysis-report.json
          bundle-baseline.json
        retention-days: 30

    - name: Comment PR with bundle analysis
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const report = JSON.parse(fs.readFileSync('bundle-analysis-report.json', 'utf8'));
            
            let comment = '## üì¶ Bundle Analysis Report\n\n';
            comment += `**Bundle Size:** ${report.summary.totalSize}\n`;
            comment += `**Gzipped Size:** ${report.summary.gzippedSize}\n`;
            comment += `**Compression Ratio:** ${report.summary.compressionRatio}\n`;
            comment += `**JS Chunks:** ${report.summary.jsChunks}\n`;
            comment += `**Assets:** ${report.summary.assets}\n\n`;
            
            if (report.regressions && report.regressions.length > 0) {
              comment += '### üö® Performance Regressions Detected\n\n';
              report.regressions.forEach((reg, index) => {
                const icon = reg.severity === 'critical' ? 'üî¥' : 
                           reg.severity === 'warning' ? 'üü°' : 'üîµ';
                comment += `${index + 1}. ${icon} **${reg.message}**\n`;
                comment += `   - ${reg.previous} ‚Üí ${reg.current} (${reg.change})\n\n`;
              });
            }
            
            if (report.recommendations && report.recommendations.length > 0) {
              comment += '### üí° Optimization Recommendations\n\n';
              const highPriorityRecs = report.recommendations.filter(r => r.priority === 'high').slice(0, 3);
              highPriorityRecs.forEach((rec, index) => {
                comment += `${index + 1}. **${rec.message}**\n`;
                if (rec.action) {
                  comment += `   - Action: ${rec.action}\n`;
                }
                if (rec.estimatedSavings) {
                  const savings = rec.estimatedSavings > 1024 * 1024 ? 
                    `${(rec.estimatedSavings / (1024 * 1024)).toFixed(2)} MB` :
                    `${(rec.estimatedSavings / 1024).toFixed(2)} KB`;
                  comment += `   - Potential Savings: ${savings}\n`;
                }
                comment += '\n';
              });
              
              if (report.recommendations.length > 3) {
                comment += `*... and ${report.recommendations.length - 3} more recommendations in the full report*\n\n`;
              }
            }
            
            comment += '---\n';
            comment += '*This report was automatically generated by the Bundle Performance Monitoring workflow.*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.error('Failed to create bundle analysis comment:', error);
          }

    - name: Fail on critical regressions
      if: steps.regression-check.outputs.regression == 'true'
      run: |
        echo "‚ùå Critical performance regressions detected!"
        echo "Check the bundle analysis report for details."
        exit 1

  bundle-optimization:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run bundle optimization
      run: npm run bundle:optimize

    - name: Check for changes
      id: changes
      run: |
        if git diff --quiet; then
          echo "changes=false" >> $GITHUB_OUTPUT
        else
          echo "changes=true" >> $GITHUB_OUTPUT
        fi

    - name: Create optimization PR
      if: steps.changes.outputs.changes == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: automated bundle optimizations'
        title: 'üöÄ Automated Bundle Optimizations'
        body: |
          ## Automated Bundle Optimizations
          
          This PR contains automated bundle optimizations detected by our monitoring system.
          
          ### Changes Made:
          - Tree shaking optimizations for imports
          - Dependency cleanup
          - Import statement optimizations
          
          ### Next Steps:
          1. Review the changes carefully
          2. Test the application to ensure functionality is preserved
          3. Run the full test suite
          4. Merge if all checks pass
          
          ---
          *This PR was automatically created by the Bundle Performance Monitoring workflow.*
        branch: automated-bundle-optimizations
        delete-branch: true

  size-limit-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build and check size limits
      run: |
        npm run build
        
        # Check if bundle exceeds size limits
        BUNDLE_SIZE=$(du -sb dist | cut -f1)
        MAX_SIZE=$((3 * 1024 * 1024)) # 3MB limit
        
        echo "Bundle size: $BUNDLE_SIZE bytes"
        echo "Size limit: $MAX_SIZE bytes"
        
        if [ $BUNDLE_SIZE -gt $MAX_SIZE ]; then
          echo "‚ùå Bundle size exceeds limit!"
          echo "Current: $(($BUNDLE_SIZE / 1024 / 1024))MB"
          echo "Limit: $(($MAX_SIZE / 1024 / 1024))MB"
          exit 1
        else
          echo "‚úÖ Bundle size within limits"
        fi

    - name: Check individual chunk sizes
      run: |
        # Check for chunks larger than 500KB
        find dist -name "*.js" -size +500k -exec echo "‚ùå Large chunk found: {} ($(du -h {} | cut -f1))" \; -exec false {} +
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ All chunks within size limits"
        fi