name: Web Application Deployment

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'backend/**'
      - 'package.json'
      - 'requirements.txt'
      - 'docker-compose.yml'
      - '.github/workflows/web-deployment.yml'
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run frontend tests
        run: npm run test:frontend

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Build frontend
        run: npm run build

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: dist/

  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run backend tests
        run: |
          cd backend
          python -m pytest tests/ -v --cov=. --cov-report=xml
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test_secret_key

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml

  build-images:
    needs: [test-frontend, test-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [frontend, backend, nginx]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: config/dockerfiles/Dockerfile.${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  deploy-staging:
    needs: build-images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          # Deploy to staging environment
          echo "Deploying to staging environment..."
          
          # Update staging docker-compose with new images
          sed -i "s|image: .*-frontend|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:develop|g" docker-compose.staging.yml
          sed -i "s|image: .*-backend|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:develop|g" docker-compose.staging.yml
          sed -i "s|image: .*-nginx|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-nginx:develop|g" docker-compose.staging.yml
          
          # Deploy via SSH
          scp docker-compose.staging.yml ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }}:/opt/ai-scholar/
          ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} "cd /opt/ai-scholar && docker-compose -f docker-compose.staging.yml pull && docker-compose -f docker-compose.staging.yml up -d"

      - name: Run staging health checks
        run: |
          # Wait for services to start
          sleep 30
          
          # Check staging health
          curl -f https://staging.aischolar.com/health || exit 1
          curl -f https://staging.aischolar.com/api/health || exit 1

  deploy-production:
    needs: build-images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup deployment environment
        run: |
          # Create deployment directory structure
          mkdir -p deployment-artifacts
          
          # Copy deployment scripts
          cp -r scripts/deployment deployment-artifacts/
          chmod +x deployment-artifacts/deployment/*.sh

      - name: Configure feature flags for deployment
        run: |
          # Enable maintenance mode
          curl -X POST -H "Authorization: Bearer ${{ secrets.API_TOKEN }}" \
            -H "Content-Type: application/json" \
            "${{ secrets.API_ENDPOINT }}/api/monitoring/features/flags" \
            -d '{"maintenance_mode": true, "new_features_enabled": false}'

      - name: Run pre-deployment checks
        run: |
          echo "Running comprehensive pre-deployment checks..."
          
          # Check deployment readiness
          ssh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "cd /opt/ai-scholar && ./scripts/deployment/health-check.sh comprehensive"
          
          # Verify database backup
          ssh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "cd /opt/ai-scholar && ./scripts/deployment/database-migration.sh backup"
          
          # Check resource availability
          ssh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "cd /opt/ai-scholar && ./scripts/deployment/health-check.sh resources"
          
          # Verify feature flags are configured
          curl -f -H "Authorization: Bearer ${{ secrets.API_TOKEN }}" \
            "${{ secrets.API_ENDPOINT }}/api/monitoring/features/flags" > /dev/null

      - name: Database Migration (Zero-Downtime)
        run: |
          echo "Running zero-downtime database migrations..."
          
          # Copy migration scripts
          scp -r deployment-artifacts/* ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }}:/opt/ai-scholar/
          
          # Run zero-downtime migrations
          ssh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "cd /opt/ai-scholar && ./scripts/deployment/database-migration.sh zero-downtime"

      - name: Blue-Green Deployment
        run: |
          echo "Starting blue-green deployment..."
          
          # Get current environment
          CURRENT_ENV=$(ssh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "cd /opt/ai-scholar && ./scripts/deployment/blue-green-deployment.sh status | grep 'Current active environment:' | awk '{print \$4}'")
          echo "Current environment: $CURRENT_ENV"
          
          # Determine next environment
          if [ "$CURRENT_ENV" = "blue" ]; then
            NEXT_ENV="green"
          else
            NEXT_ENV="blue"
          fi
          echo "Deploying to: $NEXT_ENV"
          
          # Run blue-green deployment script
          ssh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "cd /opt/ai-scholar && ./scripts/deployment/blue-green-deployment.sh latest"

      - name: Health check new environment
        run: |
          # Wait for services to start
          sleep 60
          
          # Comprehensive health check
          ssh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "cd /opt/ai-scholar && ./scripts/deployment/health-check.sh comprehensive"
          
          # External health check
          for i in {1..15}; do
            if curl -f https://aischolar.com/health && curl -f https://aischolar.com/api/health; then
              echo "External health check passed"
              break
            fi
            echo "Health check attempt $i failed, retrying..."
            sleep 30
          done

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          
          # Test critical endpoints
          curl -f https://aischolar.com/api/docs
          curl -f https://aischolar.com/api/monitoring/health
          
          # Test authentication
          curl -f -X POST https://aischolar.com/api/auth/test \
            -H "Authorization: Bearer ${{ secrets.API_TOKEN }}"
          
          # Test database connectivity
          curl -f https://aischolar.com/api/monitoring/database/health

      - name: Switch traffic
        run: |
          echo "Switching traffic to new environment..."
          
          # Update load balancer configuration
          ssh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "cd /opt/ai-scholar && ./scripts/deployment/switch-traffic.sh"
          
          # Wait and verify traffic switch
          sleep 30
          curl -f https://aischolar.com/health || exit 1

      - name: Enable new features
        run: |
          # Gradually enable new features
          curl -X POST -H "Authorization: Bearer ${{ secrets.API_TOKEN }}" \
            -H "Content-Type: application/json" \
            "${{ secrets.API_ENDPOINT }}/api/monitoring/features/flags" \
            -d '{"maintenance_mode": false, "new_features_enabled": true, "rollout_percentage": 10}'
          
          # Wait and monitor
          sleep 60
          
          # Increase rollout if no issues
          curl -X POST -H "Authorization: Bearer ${{ secrets.API_TOKEN }}" \
            -H "Content-Type: application/json" \
            "${{ secrets.API_ENDPOINT }}/api/monitoring/features/flags" \
            -d '{"rollout_percentage": 50}'
          
          sleep 60
          
          # Full rollout
          curl -X POST -H "Authorization: Bearer ${{ secrets.API_TOKEN }}" \
            -H "Content-Type: application/json" \
            "${{ secrets.API_ENDPOINT }}/api/monitoring/features/flags" \
            -d '{"rollout_percentage": 100}'

      - name: Cleanup old environment
        run: |
          echo "Cleaning up old environment..."
          
          # Stop old environment after successful switch
          ssh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "cd /opt/ai-scholar && ./scripts/deployment/blue-green-deployment.sh cleanup"

  database-migration:
    needs: deploy-production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run database migrations
        run: |
          # Run database migrations
          ssh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "cd /opt/ai-scholar && docker-compose exec -T backend python manage.py migrate"
          
          # Update search indices
          ssh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "cd /opt/ai-scholar && docker-compose exec -T backend python manage.py update_index"

  post-deployment:
    needs: [deploy-production, database-migration]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Clear CDN cache
        run: |
          # Clear CDN cache
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'

      - name: Warm up cache
        run: |
          # Warm up application cache
          curl -s https://aischolar.com/ > /dev/null
          curl -s https://aischolar.com/api/health > /dev/null

      - name: Send deployment notification
        run: |
          STATUS="${{ job.status }}"
          COLOR=$([ "$STATUS" = "success" ] && echo "good" || echo "danger")
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"attachments\": [{
                \"color\": \"$COLOR\",
                \"title\": \"AI Scholar Advanced RAG Deployment\",
                \"text\": \"Web application deployment $STATUS\",
                \"fields\": [
                  {\"title\": \"Environment\", \"value\": \"Production\", \"short\": true},
                  {\"title\": \"Branch\", \"value\": \"${{ github.ref_name }}\", \"short\": true},
                  {\"title\": \"Commit\", \"value\": \"${{ github.sha }}\", \"short\": true}
                ]
              }]
            }" \
            ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production]
    
    steps:
      - name: Rollback deployment
        run: |
          echo "Rolling back deployment..."
          
          # Switch back to previous environment
          ssh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "cd /opt/ai-scholar && ./scripts/deployment/rollback.sh"
          
          # Verify rollback
          sleep 30
          curl -f https://aischolar.com/health || exit 1

      - name: Notify rollback
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"🚨 AI Scholar deployment rolled back due to failure"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}