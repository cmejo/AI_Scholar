name: Mobile App Deployment

on:
  push:
    branches: [main, develop]
    paths:
      - 'mobile/**'
      - 'src/**'
      - 'package.json'
      - '.github/workflows/mobile-deployment.yml'
  pull_request:
    branches: [main]
    paths:
      - 'mobile/**'
      - 'src/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '11'
  FLUTTER_VERSION: '3.16.0'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:mobile

      - name: Run linting
        run: npm run lint:mobile

      - name: Build PWA
        run: npm run build:pwa

      - name: Upload PWA artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pwa-build
          path: dist/

  build-android:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Capacitor CLI
        run: npm install -g @capacitor/cli

      - name: Install dependencies
        run: npm ci

      - name: Build web app
        run: npm run build:mobile

      - name: Sync Capacitor
        run: npx cap sync android

      - name: Build Android APK
        run: |
          cd android
          ./gradlew assembleRelease

      - name: Sign Android APK
        if: github.ref == 'refs/heads/main'
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 -d > android/app/keystore.jks
          cd android
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=keystore.jks \
            -Pandroid.injected.signing.store.password="${{ secrets.KEYSTORE_PASSWORD }}" \
            -Pandroid.injected.signing.key.alias="${{ secrets.KEY_ALIAS }}" \
            -Pandroid.injected.signing.key.password="${{ secrets.KEY_PASSWORD }}"

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: android/app/build/outputs/apk/release/

  build-ios:
    needs: test
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install Capacitor CLI
        run: npm install -g @capacitor/cli

      - name: Install dependencies
        run: npm ci

      - name: Build web app
        run: npm run build:mobile

      - name: Sync Capacitor
        run: npx cap sync ios

      - name: Build iOS app
        run: |
          cd ios/App
          xcodebuild -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath App.xcarchive \
            archive

      - name: Export iOS app
        if: github.ref == 'refs/heads/main'
        run: |
          cd ios/App
          xcodebuild -exportArchive \
            -archivePath App.xcarchive \
            -exportPath . \
            -exportOptionsPlist ExportOptions.plist

      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: ios/App/*.ipa

  deploy-pwa:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download PWA artifacts
        uses: actions/download-artifact@v4
        with:
          name: pwa-build
          path: dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Deploy to CDN
        run: |
          # Determine S3 bucket based on environment
          if [ "${{ github.ref }}" = "refs/heads/main" ] || [ "${{ github.event.inputs.environment }}" = "production" ]; then
            S3_BUCKET="${{ secrets.PWA_S3_BUCKET_PROD }}"
            CLOUDFRONT_ID="${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_PROD }}"
          else
            S3_BUCKET="${{ secrets.PWA_S3_BUCKET_STAGING }}"
            CLOUDFRONT_ID="${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_STAGING }}"
          fi
          
          # Deploy PWA to CDN
          aws s3 sync dist/ s3://$S3_BUCKET --delete --cache-control "max-age=31536000,public,immutable" --exclude "*.html" --exclude "sw.js" --exclude "manifest.json"
          aws s3 sync dist/ s3://$S3_BUCKET --delete --cache-control "max-age=0,no-cache,no-store,must-revalidate" --include "*.html" --include "sw.js" --include "manifest.json"
          
          # Invalidate CloudFront cache
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths "/*"

      - name: Update PWA version
        run: |
          # Update PWA version in database or configuration
          curl -X POST "${{ secrets.API_ENDPOINT }}/api/admin/pwa/update-version" \
            -H "Authorization: Bearer ${{ secrets.API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"version": "${{ github.sha }}", "environment": "${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}"}'

  deploy-android:
    needs: build-android
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: android-apk/

      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true

      - name: Install Fastlane
        run: |
          gem install fastlane
          cd android
          bundle install

      - name: Deploy to Google Play Internal Testing
        run: |
          cd android
          fastlane deploy_internal
        env:
          GOOGLE_PLAY_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          SUPPLY_JSON_KEY_DATA: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}

      - name: Run automated testing on Play Console
        run: |
          # Wait for internal testing to be processed
          sleep 300
          
          # Check if internal testing passed
          cd android
          fastlane check_internal_testing_status

      - name: Promote to Production
        if: success()
        run: |
          cd android
          fastlane promote_to_production
        env:
          GOOGLE_PLAY_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          SUPPLY_JSON_KEY_DATA: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}

      - name: Update app metadata
        run: |
          cd android
          fastlane update_metadata
        env:
          GOOGLE_PLAY_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          SUPPLY_JSON_KEY_DATA: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}

  deploy-ios:
    needs: build-ios
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download iOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: ios-ipa
          path: ios-ipa/

      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true

      - name: Install Fastlane
        run: |
          gem install fastlane
          cd ios
          bundle install

      - name: Setup App Store Connect API Key
        run: |
          mkdir -p ~/.appstoreconnect/private_keys
          echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 -d > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8

      - name: Deploy to TestFlight
        run: |
          cd ios
          fastlane beta
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_PATH: ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8

      - name: Wait for TestFlight processing
        run: |
          cd ios
          fastlane wait_for_testflight_processing

      - name: Run automated TestFlight testing
        run: |
          cd ios
          fastlane run_testflight_tests

      - name: Submit for App Store Review
        if: success()
        run: |
          cd ios
          fastlane release
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_PATH: ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8

      - name: Update app metadata and screenshots
        run: |
          cd ios
          fastlane update_metadata_and_screenshots
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_PATH: ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8

  notify:
    needs: [deploy-pwa, deploy-android, deploy-ios]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify deployment status
        run: |
          # Send deployment notifications
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"Mobile deployment completed for AI Scholar Advanced RAG"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}